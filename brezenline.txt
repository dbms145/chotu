#include <GL/freeglut.h>
#include <GL/gl.h>
#include <iostream>
#include <cstdlib>
#include <cmath>

using namespace std;

// Global variables for storing line coordinates
int line_coordinates[4], i = 0;

void BSA_Algo(int xi, int yi, int xf, int yf)
{
    int dx = abs(xf - xi);
    int dy = abs(yf - yi);
    int x = xi, y = yi;
    
    int x_change = (xi < xf) ? 1 : -1;
    int y_change = (yi < yf) ? 1 : -1;

    glBegin(GL_POINTS);
    glVertex2i(x, y);

    if (dx > dy)
    {
        int P = 2 * dy - dx;
        for (int i = 0; i < dx; i++)
        {
            x += x_change;
            if (P >= 0)
            {
                y += y_change;
                P += 2 * (dy - dx);
            }
            else
            {
                P += 2 * dy;
            }
            glVertex2i(x, y);
        }
    }
    else
    {
        int P = 2 * dx - dy;
        for (int i = 0; i < dy; i++)
        {
            y += y_change;
            if (P >= 0)
            {
                x += x_change;
                P += 2 * (dx - dy);
            }
            else
            {
                P += 2 * dx;
            }
            glVertex2i(x, y);
        }
    }

    glEnd();
    glFlush();
}

// GLUT display callback
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 0.0, 0.0); // Red color for line
    BSA_Algo(50, 50, 300, 200);
}

// Initialization
void init()
{
    glClearColor(1.0, 1.0, 1.0, 0.0); // White background
    glColor3f(1.0, 0.0, 0.0);         // Drawing color
    gluOrtho2D(0, 500, 0, 500);       // Coordinate system
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham's Line Drawing Algorithm");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
